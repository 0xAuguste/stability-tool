exit)(
exit()
buoy.mesh
buoy.mesh.bbox
buoy.mesh.faces
len(buoy.mesh.vertices)
max(buoy.mesh.faces)
buoy.mesh.faces.max
buoy.mesh.faces.max()
exit()
import pymesh
pymesh.Quaternion.fromAxisAngle([1, 0, 0], 30)
exit()
buoy.mesh.bbox
b = buoy.rotate(buoy.mesh, 90, [1, 0, 0])
b = buoy._rotate(buoy.mesh, 90, [1, 0, 0])
b.bbox
b.vertices
exit()
self.mesh.voxels
buoy.mesh.voxels
exit()
buoy.mesh.voxels
buoy.mesh.get_attribute("voxel_volume")
buoy.mesh.add_attribute("voxel_volume")
buoy.mesh.get_attribute("voxel_volume")
buoy.mesh.get_attribute("voxel_volume").sum
buoy.mesh.get_attribute("voxel_volume").sum()
exit()
buoy.mesh.voxels
buoy.mesh.add_attribute("voxel_volume")
buoy.mesh.get_attribute("voxel_volume").sum()
exit()
buoy.mesh.add_attribute("voxel_volume")
buoy.mesh.get_attribute("voxel_volume").sum()
buoy.mesh.bbox
b=buoy._rotate(buoy.mesh, 90, [1,0,0])
b.mesh.bbox
b.bbox
buoy.mesh.get_attribute("voxel_volume").sum()
exit()
buoy.mesh.add_attribute("voxel_volume")
buoy.mesh.get_attribute("voxel_volume").sum()
buoy.mesh.bbox
buoy.mesh.voxels.size
buoy.mesh.faces.size
exit()
buoy.mesh.faces.size
exit()
buoy.mesh
exit()
buoy.mesh.get_attribute("voxel_centroid")
exit()
buoy.mesh.get_attribute("vertex_volume").sum()
buoy.mesh.get_attribute("voxel_volume").sum()
exit()
buoy.mesh.vertices
exit()
buoy.vertices * buoy.get_attribute("vertex_volume")
buoy.mesh.vertices * buoy.mesh.get_attribute("vertex_volume")
 buoy.mesh.get_attribute("vertex_volume") * buoy.mesh.vertices
buoy.mesh.get_attribute("vertex_volume") * buoy.mesh.vertices
buoy.mesh.get_attribute("vertex_volume") * buoy.mesh.vertices.T
v = buoy.mesh.get_attribute("vertex_volume") * buoy.mesh.vertices.T
v.shape
v = buoy.mesh.get_attribute("vertex_volume").T * buoy.mesh.vertices
v = buoy.vertices * buoy.get_attribute("vertex_volume").T
v = buoy.mesh.vertices * buoy.mesh.get_attribute("vertex_volume").T
v = buoy.mesh.vertices.T * buoy.mesh.get_attribute("vertex_volume")
v.shape
v.T
v.mean()
buoy.mesh.get_attribute("vertex_volume").shape
buoy.mesh.vertices.shape
v = buoy.mesh.vertices.T * buoy.mesh.get_attribute("vertex_volume")
v.shape
v = buoy.mesh.get_attribute("vertex_volume") * buoy.mesh.vertices.T
v.shape
v = buoy.mesh.get_attribute("vertex_volume").T * buoy.mesh.vertices
v = buoy.mesh.get_attribute("vertex_volume").T * buoy.mesh.vertices.T
v
v.shape
v = buoy.mesh.get_attribute("vertex_volume") * buoy.mesh.vertices
v = buoy.mesh.vertices.T * buoy.mesh.get_attribute("vertex_volume").T
v.shape
v = buoy.mesh.vertices.T * buoy.mesh.get_attribute("vertex_volume")
v.shape
exit()
buoy._findVolume(buoy.mesh)
buoy._findCentroid(buoy.mesh)
wv = buoy.mesh.vertices.T * buoy.mesh.get_attribute("vertex_volume")
wv.T
wv = wv.T
wv.shape
wv.mean(axis=1)
wv.mean()
wv.mean(axis=0)
wv.mean(axis=0) / buoy._findVolume(buoy.mesh)
exit()
buoy._findVolume(buoy.mesh)
buoy._findCentroid(buoy.mesh)
buoy.mesh.bbox
exit()
buoy._findCentroid(buoy.mesh)
buoy.mesh.bbox[0][0]
buoy.mesh.bbox[0][0:1]
buoy.mesh.bbox[0]
buoy.mesh.bbox[0][0:2]
exit()
buoy._findWaterline(buoy.mesh, 0, 100)
exit()
buoy._findWaterline(buoy.mesh, 0, 100)
exit()
buoy._findWaterline(buoy.mesh, 0, 100)
exit()
buoy._findWaterline(buoy.mesh, 0, 100)
exit()
buoy._findWaterline(buoy.mesh, 0, 100)
exit()
buoy._findWaterline(buoy.mesh, 0, 100)
exit()
buoy._findWaterline(buoy.mesh, 0, 100)
exit()
buoy._findWaterline(buoy.mesh, 0, 100)
exit()
buoy._findWaterline(buoy.mesh, 0, 100)
exit()
buoy._findWaterline(buoy.mesh, 0, 100)
exit()
buoy._findWaterline(buoy.mesh, 0, 100)
exit()
buoy._findWaterline(buoy.mesh, 0, 100)
exit()
buoy.mesh.voxels
buoy.mesh.add_attribute("voxel_centroid")
buoy.mesh.get_voxel_attribute("voxel_centroid")
buoy.mesh.get_voxel_attribute("voxel_centroid").size
buoy.mesh.get_voxel_attribute("voxel_centroid").shape
m=pymesh.slice_mesh(buoy.mesh, [0,0,1], 100)
import pymesh
m=pymesh.slice_mesh(buoy.mesh, [0,0,1], 100)
m
m[0].vertices
m[0].voxels
exit()
import numpy as np
np.zeroes(3)
np.zeros(3)
exit()
import numpy
import numpy as np
np.array([[-27.24085434 -48.63122413  83.08061218])
 [-27.94227036 -47.72921047  81.61333511]
np.array([[-27.24085434 -48.63122413  83.08061218]])
np.array([[-27.24085434, -48.63122413,  83.08061218]])
x= np.array([[-27.24085434, -48.63122413,  83.08061218]])
np.append(x, np.zeros(3))
np.append(x, np.zeros(3), axis=1)
np.append(x, np.zeros(3,1))
np.append(x, np.zeros([3,1]))
np.append(x, np.zeros([1,3]))
np.vstack(x, np.zeros(3))
np.vstack([x, np.zeros(3)])
c = np.vstack([x, np.zeros(3)])
c.mean()
c.mean(axis=1)
c.mean(axis=0)
exit()
buoy._findWaterline(buoy.mesh, 0, 100)
exit()
b
h
exit()
b
buoy._findVolume(b)
buoy._mm3_to_kg(buoy._findVolume(b))
exit()
b
h
buoy._mm3_to_kg(buoy._findVolume(b))
exit()
b.bbox
buoy.mesh.bbox
exit()
[0:5]
exit()
buoy.water_line
exit()
import mayavi
import matplotlib.pyplot
exit()
import matplotlib
exit()
buoy
buoy.mesh.vertices[:,0]
buoy.mesh.vertices[:,0].size
buoy.mesh.vertices[:,1].size
buoy.mesh.vertices[:,3].size
buoy.mesh.vertices[:,2].size
exit()
corners[0]
corners[0:1]
corners[0:2]
corners[0]
exit()
sim.buoy.mesh.bbox
exit()
([1.5]*2).append(0)
([1.5]*2)
exit()
import numpy as np
max_dim=5
np.indices((2*max_dim, 2*max_dim, max_dim)) - max_dim
exit()
d = {}
d[10] = [1,0,0]
d
d[10]
exit()
import numpy as np
np.arange(0, 360, 45)
np.arange(0, 360, 60)
exit()
d = {0: "1", 1: "2"}
for i in d:
print i
for i in d:
print(i)
for i in d:
	print(i)
exit()
args.c
args.m
args.mass
args.cg
exit()
args.cg
exit()
buoy.mesh.bbox
exit()
args.rotation
exit()
sim
sim.buoyancy_accuracy
sim.rotation_axis
sim.angular_resolution
exit()
args.cg
exit()
args.cg
exit()
x = [1,2,3]
x*2
2*x
import numpy as np
y = np.array(x)
y*2
exit()
import numpy as np
np.array(0,0,0)
np.array([0,0,0])
x=np.array([0,0,0])
x.shape
x.T.shape
x.T
exit()
buoy
buoy.mesh
buoy.mesh.bbox
exit()
